name: Build

on:
  push:
    branches: [ master, actions ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  APP_NAME: csv2xlsx

jobs:
  tag:
    runs-on: ubuntu-20.04
    steps:
    - name: Short tag
      id: short_tag
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      run: echo "::set-output name=tag::$(basename ${{ github.ref }})"
    - name: Hash
      id: hash
      if: ${{ startsWith(github.ref, 'refs/heads/') }}
      run: echo "::set-output name=tag::${{ github.sha }}"
    outputs:
      tag: ${{ steps.short_tag.outputs.tag }}${{ steps.hash.outputs.tag }}

  build:
    runs-on: ${{ matrix.config.os }}
    needs: tag
    strategy:
      matrix:
        config:
          - os: ubuntu-20.04
            name: linux-amd64
          - os: ubuntu-20.04
            arch: arm64
            name: linux-arm64
          - os: windows-latest
            name: windows-amd64
          - os: macos-latest
            name: darwin-amd64
          - os: macos-latest
            name: darwin-arm64
            arch: arm64
    steps:
      - name: Configure Git on Windows
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: git config --global core.autocrlf input
      - uses: actions/checkout@v2
      - name: Build
        if: ${{ matrix.config.os != 'windows-latest' && matrix.config.arch != 'arm64' }}
        run: |-
          mkdir -p build
          cd build
          cmake ..
          cmake --build .
      - name: Windows Build
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: |-
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
      - name: Linux ARM64 Build
        if: ${{ matrix.config.os != 'macos-latest' && matrix.config.arch == 'arm64' }}
        run: |-
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          mkdir -p build
          cd build
          cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/arm64_toolchain.cmake ..
          cmake --build .
      - name: macOS ARM64 Build
        if: ${{ matrix.config.os == 'macos-latest' && matrix.config.arch == 'arm64' }}
        run: |-
          mkdir -p build
          cd build
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 ..
          cmake --build .
      - name: Create archive
        run: |-
          cd build
          cpack
          mv ${{ env.APP_NAME }}-*.zip ${{ env.APP_NAME }}-${{ needs.tag.outputs.tag }}-${{ matrix.config.name }}.zip
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ needs.tag.outputs.tag}}-${{ matrix.config.name }}.zip
          path: build/${{ env.APP_NAME }}-${{ needs.tag.outputs.tag}}-${{ matrix.config.name }}.zip
  release:
    needs: [build, tag]
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.tag.outputs.tag }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  upload:
    needs: [release, tag]
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
    strategy:
      matrix:  
        target:
          - linux-amd64
          - linux-arm64
          - windows-amd64
          - darwin-amd64
          - darwin-arm64
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-${{ needs.tag.outputs.tag }}-${{ matrix.target }}.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.APP_NAME }}-${{ needs.tag.outputs.tag }}-${{ matrix.target }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ needs.tag.outputs.tag }}-${{ matrix.target }}.zip
          asset_content_type: application/zip
